{"version":3,"sources":["redux.ts","Demo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["actionObservable","ActionObservable","selectState","state","store","createStore","action","type","payload","applyMiddleware","createMiddleware","Home","dispatch","useDispatch","useSelector","useState","setAction","input","setInput","actionTypes","actionTypesToObserve","setActionTypesToObserve","useActionObserver","console","log","className","onClick","time","Date","now","value","onChange","event","target","Number","isNaN","alert","changeBy","map","actionType","includes","filter","existingActionType","toggleActionTypesToObserve","JSON","stringify","App","observable","Demo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAgCaA,EAAmB,IAAIC,mBAEvBC,EAAc,SAACC,GAAD,OAAmBA,GAEjCC,EAAQC,aAjBL,WAAwC,IAAvCF,EAAsC,uDAA9B,EAAGG,EAA2B,uCACrD,OAAQA,EAAOC,MACb,IAAK,YACH,OAAOJ,EAAQ,EACjB,IAAK,YACH,OAAOA,EAAQ,EACjB,IAAK,YACH,OAAOA,EAAQG,EAAOE,QACxB,QACE,OAAOL,KAUXM,YAAgBT,EAAiBU,qBCsCpBC,EAvEF,WACX,IAAMC,EAAWC,cAEXV,EAAQW,YAAYZ,GAHT,EAKWa,mBAAiB,CAAER,KAAM,SALpC,mBAKVD,EALU,KAKFU,EALE,OAOSD,mBAAS,KAPlB,mBAOVE,EAPU,KAOHC,EAPG,KASXC,EAAc,CAAC,YAAa,YAAa,aAT9B,EAUuCJ,mBAASI,GAVhD,mBAUVC,EAVU,KAUYC,EAVZ,KA4BjB,OALAC,6BAAkB,SAAChB,GACjBiB,QAAQC,IAAI,kBAAmBlB,GAC/BU,EAAUV,KACTc,GAGD,sBAAKK,UAAU,OAAf,UACE,wBACA,wBAAQC,QAAS,kBAAMd,EDjCG,CAC9BL,KAAM,YACNoB,KAAMC,KAAKC,SC+BP,sBACA,wBAAQH,QAAS,kBAAMd,ED7BG,CAC9BL,KAAM,YACNoB,KAAMC,KAAKC,SC2BP,sBACA,uBACEtB,KAAK,SACLuB,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAWd,EAASc,EAAMC,OAAOH,UAE7C,wBACEJ,QAAS,WACP,IAAMI,EAAQI,OAAOjB,GACjBkB,MAAML,GACRM,MAAM,mBAGRxB,EDrCc,SAACkB,GAAD,MAAoB,CAC1CvB,KAAM,YACNC,QAASsB,EACTH,KAAMC,KAAKC,OCkCMQ,CAASP,KAPtB,iBAYA,6CAAc3B,KACd,qDAAsBiB,KACtB,sBAAKK,UAAU,sBAAf,UACE,yCACCN,EAAYmB,KAAI,SAACC,GAAD,OACf,wBAEEb,QAAS,kBA9CgB,SAACa,GAC9BnB,EAAqBoB,SAASD,GAChClB,EACED,EAAqBqB,QACnB,SAACC,GAAD,OAAwBA,IAAuBH,MAInDlB,EAAwB,GAAD,mBAAKD,GAAL,CAA2BmB,KAsC7BI,CAA2BJ,IAF5C,SAIGA,GAHIA,SAOX,sBAAKd,UAAU,cAAf,UACE,iDACA,8BAAMmB,KAAKC,UAAUvC,EAAQ,KAAM,YCrD5BwC,EAVH,WACV,OACE,cAAC,IAAD,CAAU1C,MAAOA,EAAjB,SACE,cAAC,2BAAD,CAA0B2C,WAAY/C,EAAtC,SACE,cAACgD,EAAD,SCGOC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2e5ce6f2.chunk.js","sourcesContent":["import { Action, ActionObservable } from 'react-redux-action-observer';\nimport { applyMiddleware, createStore } from 'redux';\n\nexport const increment = () => ({\n  type: 'INCREMENT',\n  time: Date.now(),\n});\n\nexport const decrement = () => ({\n  type: 'DECREMENT',\n  time: Date.now(),\n});\n\nexport const changeBy = (value: number) => ({\n  type: 'CHANGE_BY',\n  payload: value,\n  time: Date.now(),\n});\n\nconst reducer = (state = 0, action: Action): number => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state - 1;\n    case 'CHANGE_BY':\n      return state + action.payload;\n    default:\n      return state;\n  }\n};\n\nexport const actionObservable = new ActionObservable();\n\nexport const selectState = (state: number) => state;\n\nexport const store = createStore(\n  reducer,\n  applyMiddleware(actionObservable.createMiddleware())\n);\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Action, useActionObserver } from 'react-redux-action-observer';\nimport { changeBy, decrement, increment, selectState } from './redux';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n\n  const state = useSelector(selectState);\n\n  const [action, setAction] = useState<Action>({ type: 'INIT' });\n\n  const [input, setInput] = useState('0');\n\n  const actionTypes = ['INCREMENT', 'DECREMENT', 'CHANGE_BY'];\n  const [actionTypesToObserve, setActionTypesToObserve] = useState(actionTypes);\n  const toggleActionTypesToObserve = (actionType: string) => {\n    if (actionTypesToObserve.includes(actionType)) {\n      setActionTypesToObserve(\n        actionTypesToObserve.filter(\n          (existingActionType) => existingActionType !== actionType\n        )\n      );\n    } else {\n      setActionTypesToObserve([...actionTypesToObserve, actionType]);\n    }\n  };\n\n  useActionObserver((action) => {\n    console.log('component says:', action);\n    setAction(action);\n  }, actionTypesToObserve);\n\n  return (\n    <div className=\"Demo\">\n      <div></div>\n      <button onClick={() => dispatch(increment())}>increase</button>\n      <button onClick={() => dispatch(decrement())}>decrease</button>\n      <input\n        type=\"number\"\n        value={input}\n        onChange={(event) => setInput(event.target.value)}\n      ></input>\n      <button\n        onClick={() => {\n          const value = Number(input);\n          if (isNaN(value)) {\n            alert('Invalid number.');\n            return;\n          }\n          dispatch(changeBy(value));\n        }}\n      >\n        Add\n      </button>\n      <p>{`state: ${state}`}</p>\n      <p>{`listening for: ${actionTypesToObserve}`}</p>\n      <div className=\"toggle-action-types\">\n        <p>toggle: </p>\n        {actionTypes.map((actionType) => (\n          <button\n            key={actionType}\n            onClick={() => toggleActionTypesToObserve(actionType)}\n          >\n            {actionType}\n          </button>\n        ))}\n      </div>\n      <div className=\"last-action\">\n        <p>observed action:</p>\n        <pre>{JSON.stringify(action, null, 2)}</pre>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { ActionObservableProvider } from 'react-redux-action-observer';\nimport './App.css';\nimport Demo from './Demo';\nimport { actionObservable, store } from './redux';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <ActionObservableProvider observable={actionObservable}>\n        <Demo />\n      </ActionObservableProvider>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}